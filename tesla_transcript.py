# -*- coding: utf-8 -*-
"""Tesla Transcript.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EIA8vgAachMv57UxoyN3Ii1aCPb1ZUbW

***Step 1: identify the source types of earning call for all public listing companies; (Youtube, Websites, Video/Audio)***

There are 2 typical types of earning call sources:
1. Youtube (e.g.# Use the video ID directly, not the URL, video_id = 'ktkCRVxTuEI')
2. Audio Stream (e.g. # video_url = 'https://edge.media-server.com/mmc/p/h74hmdp6/' )
"""

!pip install youtube-transcript-api
!pip install openai

"""**Step 2: Use python library to link to earning call (Youtube channel, like Tesla)**"""

# extract from Youtube to non-readable Text transcript

from youtube_transcript_api import YouTubeTranscriptApi

# Use the video ID directly, not the URL
video_id = 'ktkCRVxTuEI'

transcript = YouTubeTranscriptApi.get_transcript(video_id)

transcript_full = ''

for entry in transcript:
    transcript_full += ' ' + entry['text']

print(transcript_full)

"""**Step 3: Use python command to read/extract contents from Youtube to Text into organized and cataloged format.**"""

# extract readable Text transcript

import re
from youtube_transcript_api import YouTubeTranscriptApi

# Use the video ID directly, not the URL
video_id = 'ktkCRVxTuEI'

transcript = YouTubeTranscriptApi.get_transcript(video_id)

# Function to add headings based on speaker or section keywords
def add_headings(transcript_full):
    # Define patterns for different sections and speakers
    patterns = {
        "### Elon Musk's Remarks ###": r"\bElon\b.*?\bMusk\b",
        "### Question ###": r"\bQuestion\b",
        "### Answer ###": r"\bAnswer\b",
        "### Opening Remarks ###": r"\bOpening Remarks\b",
        "### Investor Questions ###": r"\bInvestor Questions\b",
        "### Analyst Questions ###": r"\bAnalyst Questions\b"
    }

    # Apply patterns to insert headings
    for heading, pattern in patterns.items():
        transcript_full = re.sub(pattern, f"\n\n{heading}\n", transcript_full, flags=re.IGNORECASE)

    return transcript_full

# Initialize transcript_full with a space to start clean
transcript_full = ''

# Append each entry's text to transcript_full
for entry in transcript:
    transcript_full += ' ' + entry['text']

# Remove leading and trailing spaces
transcript_full = transcript_full.strip()

# Apply the headings to the full transcript
organized_transcript = add_headings(transcript_full)

# Print or save the organized transcript
print(organized_transcript)